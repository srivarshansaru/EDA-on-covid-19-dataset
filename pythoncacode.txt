import pandas as pd
  import numpy as np
  from scipy.stats import zscore

  data = pd.read_csv("/content/python.csv")
  data = data.drop_duplicates()
  data = data.dropna(thresh=len(data) * 0.6, axis=1)

  for col in data.select_dtypes(include=[np.number]):
      data[col].fillna(data[col].median(), inplace=True)
  for col in data.select_dtypes(include=[object]):
      data[col].fillna(data[col].mode()[0], inplace=True)

  if 'date' in data.columns:
      data['date'] = pd.to_datetime(data['date'], errors='coerce')
  for col in data.select_dtypes(include=[object]):
      data[col] = data[col].str.lower().str.strip()
  numeric_cols = data.select_dtypes(include=[np.number])
  z_scores = np.abs(zscore(numeric_cols))
  data = data[(z_scores < 3).all(axis=1)]
data.to_csv("cleaned_dataset.csv", index=False)
print("Data cleaning complete. Cleaned data saved as 'cleaned_dataset.csv'")



data = pd.DataFrame(data)

df = pd.melt(data,id_vars='Date',value_vars=['Hospitalizations Rate - Total','Deaths Rate - Total'], var_name='Metric',value_name='Rate')
df['Date'] = pd.to_datetime(df['Date'])
filtered_data = df.sort_values('Date').head(30)
plt.figure(figsize=(10,6))
sns.lineplot(data=df,x = 'Date',y='Rate',hue='Metric')
plt.title("Comparison between hospitalization rate and death rate (totally)")
plt.ylabel('Rate')
plt.xlabel('Date')
plt.grid(False)
plt.tight_layout()
plt.show()


hospitalize = [
    'Hospitalizations - Age 0-17',
    'Hospitalizations - Age 18-29',
    'Hospitalizations - Age 30-39',
    'Hospitalizations - Age 40-49',
    'Hospitalizations - Age 50-59',
    'Hospitalizations - Age 60-69',
    'Hospitalizations - Age 70-79',
    'Hospitalizations - Age 80+'
]


avg = data[hospitalize].mean().reset_index()
avg.columns = ['Metric', 'Rate']

avg['Age Group'] = avg['Metric'].str.extract(r'Age\s*(.*)')

plt.figure(figsize=(10, 6))
sns.barplot(data=avg, x='Age Group', y='Rate')

plt.title('Average Hospitalization Rate by Age Group')
plt.ylabel('Hospitalization Rate')
plt.xlabel('Age Group')
plt.tight_layout()
plt.show()



race_groups = ['Latinx', 'Asian Non-Latinx', 'Black Non-Latinx', 'White Non-Latinx', 'Other Race Non-Latinx']
cases_cols = [f'Cases - {race}' for race in race_groups]
hosp_cols = [f'Hospitalizations - {race}' for race in race_groups]


avg_cases = df[cases_cols].mean()
avg_hosp = df[hosp_cols].mean()

race_df = pd.DataFrame({
    "Race": race_groups * 2,
    "Average Count": list(avg_cases) + list(avg_hosp),
    "Type": ["Cases"] * len(race_groups) + ["Hospitalizations"] * len(race_groups)
})

race_df = race_df.dropna()


plt.figure(figsize=(10, 6))
sns.barplot(data=race_df, x="Race", y="Average Count", hue="Type", palette="Set2")
plt.title("Average Case vs Hospitalization Rate by Race Group")
plt.xticks(rotation=45)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()
plt.show()



df['Date'] = pd.to_datetime(df['Date'], errors='coerce')


df['Year'] = df['Date'].dt.year

rate_cols = ['Cases Rate - Total', 'Hospitalizations Rate - Total', 'Deaths Rate - Total']
df_yearly = df.groupby('Year')[rate_cols].mean().dropna()


corrs = []
years = df_yearly.index.tolist()

for year in years:
    corr = df[df['Year'] == year][rate_cols].corr()
    corrs.append({
        'Year': year,
        'Cases vs Hospitalizations': corr.loc['Cases Rate - Total', 'Hospitalizations Rate - Total'],
        'Cases vs Deaths': corr.loc['Cases Rate - Total', 'Deaths Rate - Total'],
        'Hospitalizations vs Deaths': corr.loc['Hospitalizations Rate - Total', 'Deaths Rate - Total']
    })

corr_df = pd.DataFrame(corrs)


plt.figure(figsize=(10, 6))
sns.lineplot(data=corr_df, x='Year', y='Cases vs Hospitalizations', label='Cases vs Hospitalizations')
sns.lineplot(data=corr_df, x='Year', y='Cases vs Deaths', label='Cases vs Deaths')
sns.lineplot(data=corr_df, x='Year', y='Hospitalizations vs Deaths', label='Hospitalizations vs Deaths')

plt.title('Year-wise Correlation of COVID Metrics')

plt.ylabel('Correlation Coefficient')
plt.ylim(-1, 1)
plt.grid(True, linestyle='--', alpha=0.6)
plt.legend()
plt.tight_layout()
plt.show()



df['Date'] = pd.to_datetime(df['Date'], format="%m/%d/%Y")

df = df.dropna(subset=['Cases Rate - Total'])


df = df.sort_values('Date')


sns.set(style="whitegrid")


plt.figure(figsize=(12, 6))
sns.regplot(
    x=df['Date'].map(datetime.toordinal),
    y=df['Cases Rate - Total'],
    scatter_kws={"s": 50, "alpha": 0.6},
    line_kws={"color": "red"},
)


plt.xticks(
    ticks=df['Date'].map(datetime.toordinal)[::int(len(df)/10)],
    labels=df['Date'].dt.strftime('%Y-%m-%d')[::int(len(df)/10)],
    rotation=45
)
plt.title("COVID-19 Case Rate Over Time with Linear Regression")
plt.xlabel("Date")
plt.ylabel("Cases Rate - Total")
plt.tight_layout()
plt.show()
